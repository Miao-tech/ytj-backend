# 指令描述字典 (用作 'switch-case')
# 键: 指令元组 (设备地址, 数据1, 数据2, 结束符)
# 值: 人类可读的描述字符串
COMMAND_DESCRIPTIONS = {
    # --- 万用表控制 (Multimeter Control) ---
    (0x01, 0x00, 0x00, 0xFE): "控制万用表: 关闭万用表",
    (0x02, 0x00, 0x01, 0xFE): "控制万用表: 切换到电阻档位",
    (0x03, 0x00, 0x02, 0xFE): "控制万用表: 切换到通断蜂鸣器档位",
    (0x04, 0x00, 0x03, 0xFE): "控制万用表: 切换到直流电压档位",
    (0x05, 0x00, 0x04, 0xFE): "控制万用表: 切换到交流电压档位",
    (0x06, 0x00, 0x05, 0xFE): "控制万用表: 切换到直流电流档位",

    # --- 示波器控制 (Oscilloscope Control) ---
    (0x07, 0x00, 0x00, 0xFE): "控制示波器: 关闭示波器",
    (0x08, 0x00, 0x01, 0xFE): "控制示波器: 启动示波器",

    # --- 直流电源输出控制 (DC Power Supply Control) ---
    (0x09, 0x00, 0x01, 0xFE): "控制直流电源: 输出 0.1V 电压",
    (0x09, 0x00, 0x64, 0xFE): "控制直流电源: 输出 1.0V 电压",
    (0x09, 0x03, 0xE8, 0xFE): "控制直流电源: 输出 10.0V 电压",
    (0x09, 0x03, 0xE9, 0xFE): "控制直流电源: 输出 10.1V 电压",

    # --- 信号源输出控制 (Signal Generator Control) ---
    (0x0A, 0x01, 0x01, 0xFE): "控制信号源: 输出正弦波 1Hz",
    (0x0A, 0x02, 0x01, 0xFE): "控制信号源: 输出三角波 1Hz",
    (0x0A, 0x03, 0x01, 0xFE): "控制信号源: 输出矩形波 1Hz",
    (0x0A, 0x01, 0x64, 0xFE): "控制信号源: 输出正弦波 100Hz",
    (0x0A, 0x02, 0x64, 0xFE): "控制信号源: 输出三角波 100Hz",
    (0x0A, 0x03, 0x64, 0xFE): "控制信号源: 输出矩形波 100Hz",

    # --- 传感器读取指令 (Sensor Read Commands) ---
    (0x0B, 0x00, 0x01, 0xFE): "读取指令: 读取温湿度传感器值",
    (0x0C, 0x00, 0x01, 0xFE): "读取指令: 读取红外传感器值(测距)",
    (0x0D, 0x00, 0x01, 0xFE): "读取指令: 读取手势传感器值",
    (0x0E, 0x00, 0x01, 0xFE): "读取指令: 读取光强度传感器值",

    # --- LED灯亮灭控制 (LED On/Off Control) ---
    (0x10, 0x00, 0x00, 0xFE): "控制LED: 关闭1号LED",
    (0x10, 0x00, 0x01, 0xFE): "控制LED: 打开1号LED",
    (0x11, 0x00, 0x00, 0xFE): "控制LED: 关闭2号LED",
    (0x11, 0x00, 0x01, 0xFE): "控制LED: 打开2号LED",
    (0x12, 0x00, 0x00, 0xFE): "控制LED: 关闭3号LED",
    (0x12, 0x00, 0x01, 0xFE): "控制LED: 打开3号LED",
    (0x13, 0x00, 0x00, 0xFE): "控制LED: 关闭4号LED",
    (0x13, 0x00, 0x01, 0xFE): "控制LED: 打开4号LED",
    (0x14, 0x00, 0x00, 0xFE): "控制LED: 关闭5号LED",
    (0x14, 0x00, 0x01, 0xFE): "控制LED: 打开5号LED",
    (0x15, 0x00, 0x00, 0xFE): "控制LED: 关闭6号LED",
    (0x15, 0x00, 0x01, 0xFE): "控制LED: 打开6号LED",
    (0x16, 0x00, 0x00, 0xFE): "控制LED: 关闭7号LED",
    (0x16, 0x00, 0x01, 0xFE): "控制LED: 打开7号LED",
    (0x17, 0x00, 0x00, 0xFE): "控制LED: 关闭8号LED",
    (0x17, 0x00, 0x01, 0xFE): "控制LED: 打开8号LED",
    (0x18, 0x00, 0x00, 0xFE): "控制LED: 关闭9号LED",
    (0x18, 0x00, 0x01, 0xFE): "控制LED: 打开9号LED",
    
    # --- 补光灯控制 (Fill Light Control) ---
    (0x19, 0x00, 0x00, 0xFE): "控制补光灯: 熄灭",
    (0x19, 0x00, 0x01, 0xFE): "控制补光灯: 亮度 1%",
    (0x19, 0x00, 0x32, 0xFE): "控制补光灯: 亮度 50%",
    (0x19, 0x00, 0x64, 0xFE): "控制补光灯: 亮度 100%",
}

def get_command_description(command_bytes):
    """
    根据输入的bytes指令，从字典中查找并返回对应的描述。
    
    Args:
        command_bytes (bytes): 长度为4的字节指令，例如 b'\x10\x00\x01\xfe'。
        
    Returns:
        str: 指令的描述或一个“未知指令”的提示。
    """
    # 将bytes转换为元组，以便作为字典的键
    command_tuple = tuple(command_bytes)
    
    # 使用.get()方法来安全地获取值，如果键不存在，则返回默认值
    return COMMAND_DESCRIPTIONS.get(command_tuple, f"未知的下发指令: {command_bytes.hex().upper()}")
